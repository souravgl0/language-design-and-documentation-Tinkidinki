class Program
{
  int N;
  int arr[1000000];

  void printArray()
  {
    int i;
    for(i = 0; i < N; i = i + 1)
    {
      callout("print", "int", arr[i]);
      callout("print", " ");
    }
    return;
  }

  void merge(int l, int m, int r)
  {
    int i, j, k, n1, n2, L[500000], R[500000];
    n1 = m - l + 1;
    n2 = r - m;

    for(i = 0; i < n1; i = i + 1)
    {
      L[i] = arr[l + i];
    }

    for(i = 0; i < n2; i = i + 1)
    {
      R[i] = arr[m + 1 + i];
    }

    i = 0;
    j = 0;
    k = l;

    while(i < n1 && j < n2)
    {
      if(L[i] <= R[j])
      {
        arr[k] = L[i];
        i = i + 1;
      }
      else
      {
        arr[k] = R[j];
        j = j + 1;
      }
      k = k + 1;
    }

    while(i < n1)
    {
      arr[k] = L[i];
      i = i + 1;
      k = k + 1;
    }

    while(j < n2)
    {
      arr[k] = R[j];
      j = j + 1;
      k = k + 1;
    }
    return;
  }
  void mergeSort(int l, int r)
  {
    if(l < r)
    {
      int m;
      m = l + (r - l) / 2;
      callout("mergeSort", l, m);
      callout("mergeSort", m + 1, r);
      callout("merge", l, m, r);
    }
    return;
  }
  void main()
  {
    int i;
    callout("print", "Enter N(max = 1000000): ");
    N = callout("read", "int");
    for(i = 0; i < N; i = i + 1)
    {
      arr[i] = callout("read", "int");
    }
    callout("mergeSort", 0, N - 1);
    callout("print", "\nAfter Sorting: ");
    callout("printArray");
    return;
  }
}
